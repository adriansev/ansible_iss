#!/bin/bash

ARG1="${1}"
ARG2="${2}"

scsi_info () {
/usr/lib/udev/scsi_id -g -x -d ${1} | sed 's/ //g'
}

help () {
echo -e "${0} arg disk_id
without args the whole disk mapping is shown
args can be one of: getdev | smartarc | infoarc | id | id_off
id_of for turning of the identification does not require an argument"
}

hw_dev_list=$(
cli64 disk info | tail -n +3 | head -n -2 | awk '{if ( $(NF-2) == "N.A.") next; if (NF == 7) {printf "%s\tEnc%s_%s%s\t%s\t%s  %s\n",$1,$2,$3,$4,$5,$6,$7}; if (NF == 8) {printf "%s\tEnc%s_%s%s\t%s_%s\t%s  %s\n",$1,$2,$3,$4,$5,$6,$7,$8}; }'
)
mapfile -t hw_dev_list_arr <<< "${hw_dev_list}"

scsi_list=$(find /dev/disk/by-path -name "*scsi*" ! -name "*-part*" | sort);
dev2sd_map=$(for scsi_dev in ${scsi_list}; do echo -e "${scsi_dev}\t\t$(realpath ${scsi_dev})";done) #"
mapfile -t  dev2sd_map_arr <<< "${dev2sd_map}"

header () { echo -e "Idx\tArcDrv\tEnc/Slot\tModel\tSize\tType\tPciPath\tDevName";}

infotxt=$( for index in "${!hw_dev_list_arr[@]}"; do
    echo -e "$((index + 1))\t${hw_dev_list_arr[index]}\t${dev2sd_map_arr[index]}"
done ) 

if [[ "${ARG1}" == "getdev" ]]; then
    [[ -z "${ARG2}" ]] && { help; exit 1; }
    re='^[0-9]+$'
    if [[ ${ARG2} =~ ${re} ]] ; then
        ( header; echo "${infotxt}" | awk -v arcdrv="${ARG2}" '{if ($2 == arcdrv) print $0 }' ) | column -t
    else
        ( header; echo "${infotxt}" | grep -i -w "${ARG2}" ) | column -t
    fi

elif [[ "${ARG1}" == "smartarc" ]]; then
    [[ -z "${ARG2}" ]] && { echo "second argument should be slot, dev or areca dv number"; exit 1; }
    devinfo=$( echo "${infotxt}" | grep -i -w "${ARG2}" | column -t)
    arcdev=$(echo "${devinfo}" | awk '{print $2}' )
    cli64 disk smart drv="${arcdev}"

elif [[ "${ARG1}" == "infoarc" ]]; then
    [[ -z "${ARG2}" ]] && { echo "second argument should be slot, dev or areca dv number"; exit 1; }
    devinfo=$( echo "${infotxt}" | grep -i -w "${ARG2}" | column -t)
    arcdev=$(echo "${devinfo}" | awk '{print $2}' )
    cli64 disk info drv="${arcdev}"

elif [[ "${ARG1}" == "id" ]]; then
    [[ -z "${ARG2}" ]] && { echo "second argument should be slot, dev or areca dv number"; exit 1; }
    devinfo=$( echo "${infotxt}" | grep -i -w "${ARG2}" | column -t)
    arcdev=$(echo "${devinfo}" | awk '{print $2}' )
    cli64 disk identify drv="${arcdev}"

elif [[ "${ARG1}" == "id_off" ]]; then
    cli64 disk identify drv=0

else
    ( header; echo "${infotxt}" ) | column -t
fi

